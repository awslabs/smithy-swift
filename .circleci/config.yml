version: 2.1

commands:
  with_cache:
    description: |
      Run a set of steps with gradle dependencies cached.
      This command will first restore a cache of gradle dependencies, if one was
      saved by a previous build. The provided `steps` will then be executed, and
      if successful, then a fresh cache will be saved, if required.
      The contents of the `~/.gradle` directory is cached, which will substantially
      improve build times for projects with many dependencies.
      The cache-key is generated from any files named `build.gradle` that are
      present in the `working_directory`.
    parameters:
      cache_key:
        default: v1
        description: Add a custom suffix to your cache key in the event you need to
          work with multiple caches.
        type: string
      steps:
        type: steps
    steps:
    - run:
        command: find . -name 'build.gradle.kts' | sort | xargs cat | shasum | awk '{print
          $1}' > /tmp/gradle_cache_seed
        name: Generate Cache Checksum
    - restore_cache:
        key: gradle-<< parameters.cache_key>>-{{ checksum "/tmp/gradle_cache_seed"
          }}-{{ checksum ".circleci/config.yml" }}
    - steps: << parameters.steps >>
    - save_cache:
        key: gradle-<< parameters.cache_key>>-{{ checksum "/tmp/gradle_cache_seed"
          }}-{{ checksum ".circleci/config.yml" }}
        paths:
        - ~/.gradle/caches
        - ~/.gradle/wrapper

  collect_test_results:
    description: |
      Store test reports to build artifacts.
      Locate any JUnit test reports and store them as build artifacts and test results.
      Store the HTML build report to build artifacts.
    parameters:
      reports_path:
        default: build/reports/
        description: Artifacts to be published
        type: string
      test_results_path:
        default: build/test-results/
        description: Results to be published
        type: string
    steps:
    - when:
        condition: <<parameters.test_results_path>>
        steps:
        - store_test_results:
            path: <<parameters.test_results_path>>
        - store_artifacts:
            destination: Results
            path: <<parameters.test_results_path>>
    - unless:
        condition: <<parameters.test_results_path>>
        steps:
        - run:
            command: |
              mkdir -p /tmp/test_results/junit
              find . -name '*TEST-*.xml' -exec cp -v {} /tmp/test_results/junit \;
            name: Gather Test Results
        - store_test_results:
            path: /tmp/test_results
        - store_artifacts:
            destination: Results
            path: /tmp/test_results
    - when:
        condition: <<parameters.reports_path>>
        steps:
        - store_artifacts:
            destination: Reports
            path: <<parameters.reports_path>>
    - unless:
        condition: <<parameters.reports_path>>
        steps:
        - store_artifacts:
            destination: Reports
            path: build/reports/tests/test/

  pre_start_ios_simulator:
    description: >-
      Pre-start iOS Simulator, as the build may fail if it takes too long to start up during that step
    steps:
      - run:
          name: Pre-start iOS Simulator
          command: |
            bash CircleciScripts/pre_start_iOS_simulator.sh

jobs:
  build_and_unittest_swift_client_runtime:
    macos:
      xcode: "12.1.0"
    steps:
      - checkout
      - pre_start_ios_simulator
      - run:
          name: Clone aws-crt-swift
          command: |
            rm -rf ~/Library/Developer/Xcode/DerivedData
            mkdir -p ~/Projects/Amplify/SwiftSDK/
            cd ~/Projects/Amplify/SwiftSDK/
            git clone --recursive git@github.com:awslabs/aws-crt-swift.git
            cd -
      - run:
          name: Build ClientRuntime
          working_directory: ~/project/ClientRuntime
          command: |
            xcodebuild -scheme ClientRuntime-Package -destination "${destination}"
      - run:
          name: Unit Test ClientRuntime
          working_directory: ~/project/ClientRuntime
          command: |
            xcodebuild test -enableCodeCoverage YES -scheme ClientRuntime-Package -destination "${destination}"
            bash <(curl -s https://codecov.io/bash)
      - run:
          name: Install swiftlint
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install swiftlint
      - run:
          name: Lint ClientRuntime
          working_directory: ~/project/ClientRuntime
          command: |
            swiftlint

  build_smithy_swift:
    macos:
      xcode: "12.1.0"
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    steps:
      - checkout
      - with_cache:
          cache_key: "macOSv2"
          steps:
            - run:
                name: Clone aws-crt-swift
                command: |
                  rm -rf ~/Library/Developer/Xcode/DerivedData
                  mkdir -p ~/Projects/Amplify/SwiftSDK/
                  cd ~/Projects/Amplify/SwiftSDK/
                  git clone --recursive git@github.com:awslabs/aws-crt-swift.git
                  cd -
            - run:
                name: Build Smithy Swift
                working_directory: ~/project
                command: ./gradlew build -x test
            - persist_to_workspace:
                root: .
                paths:
                  - ./build
                  - ./*/build

  test_smithy_swift:
    macos:
      xcode: "12.1.0"
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    steps:
      - checkout
      - attach_workspace:
          at: .
      - with_cache:
          cache_key: "macOSv2"
          steps:
            - run:
                working_directory: ~/project
                name: Run tests
                command: |
                  ./gradlew test
      - collect_test_results:
          test_results_path: ""
          reports_path: ""

  lint_smithy_swift:
    macos:
      xcode: "12.1.0"
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          working_directory: ~/project
          name: Run ktlint
          command: |
            ./gradlew ktlint
            
workflows:
  version: 2

  build_and_test_smithy_swift:
    jobs:
    - build_and_unittest_swift_client_runtime
    - build_smithy_swift:
        requires:
          - build_and_unittest_swift_client_runtime
    - test_smithy_swift:
        requires:
          - build_smithy_swift
    - lint_smithy_swift  
