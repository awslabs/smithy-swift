// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct EndpointParams {
    /// docs
    public let stage: Swift.String?

    public init(
        stage: Swift.String? = nil
    )
    {
        self.stage = stage
    }
}

public protocol EndpointResolver {
    func resolve(params: EndpointParams) throws -> ClientRuntime.Endpoint
}

public struct DefaultEndpointResolver: EndpointResolver  {

    private let engine: ClientRuntime.EndpointsRuleEngine
    private let ruleSet = "{\"version\":\"1.3\",\"parameters\":{\"Stage\":{\"required\":false,\"documentation\":\"docs\",\"type\":\"String\"}},\"rules\":[{\"conditions\":[{\"fn\":\"isSet\",\"argv\":[{\"ref\":\"Stage\"}]},{\"fn\":\"stringEquals\",\"argv\":[{\"ref\":\"Stage\"},\"alpha\"]}],\"endpoint\":{\"url\":\"https://fpmhmw9kd7.execute-api.us-west-2.amazonaws.com/beta\",\"properties\":{},\"headers\":{}},\"type\":\"endpoint\"},{\"conditions\":[{\"fn\":\"isSet\",\"argv\":[{\"ref\":\"Stage\"}]},{\"fn\":\"stringEquals\",\"argv\":[{\"ref\":\"Stage\"},\"beta\"]}],\"endpoint\":{\"url\":\"https://fpmhmw9kd7.execute-api.us-west-2.amazonaws.com/beta\",\"properties\":{},\"headers\":{}},\"type\":\"endpoint\"},{\"conditions\":[{\"fn\":\"isSet\",\"argv\":[{\"ref\":\"Stage\"}]},{\"fn\":\"stringEquals\",\"argv\":[{\"ref\":\"Stage\"},\"gamma\"]}],\"endpoint\":{\"url\":\"https://mow32it2pa.execute-api.us-east-1.amazonaws.com/gamma\",\"properties\":{},\"headers\":{}},\"type\":\"endpoint\"},{\"conditions\":[{\"fn\":\"isSet\",\"argv\":[{\"ref\":\"Stage\"}]},{\"fn\":\"stringEquals\",\"argv\":[{\"ref\":\"Stage\"},\"prod\"]}],\"endpoint\":{\"url\":\"https://bqcgz0nn7a.execute-api.us-east-1.amazonaws.com/prod\",\"properties\":{},\"headers\":{}},\"type\":\"endpoint\"},{\"conditions\":[],\"endpoint\":{\"url\":\"https://bqcgz0nn7a.execute-api.us-east-1.amazonaws.com/prod\",\"properties\":{},\"headers\":{}},\"type\":\"endpoint\"}]}"

    public init() throws {
        engine = try ClientRuntime.EndpointsRuleEngine(partitions: "ClientRuntime.partitionDefinition", ruleSet: ruleSet)
    }

    public func resolve(params: EndpointParams) throws -> ClientRuntime.Endpoint {
        let context = try ClientRuntime.EndpointsRequestContext()
        try context.add(name: "Stage", value: params.stage)

        guard let crtResolvedEndpoint = try engine.resolve(context: context) else {
            throw EndpointError.unresolved("Failed to resolved endpoint")
        }

        if crtResolvedEndpoint.getType() == .error {
            let error = crtResolvedEndpoint.getError()
            throw EndpointError.unresolved(error)
        }

        guard let url = crtResolvedEndpoint.getURL() else {
            assertionFailure("This must be a bug in either CRT or the rule engine, if the endpoint is not an error, it must have a url")
            throw EndpointError.unresolved("Failed to resolved endpoint")
        }

        let headers = crtResolvedEndpoint.getHeaders() ?? [:]
        let properties = crtResolvedEndpoint.getProperties() ?? [:]
        return try Endpoint(urlString: url, headers: Headers(headers), properties: properties)
    }
}

public struct EndpointResolverMiddleware<OperationStackOutput>: ClientRuntime.Middleware {
    public let id: Swift.String = "EndpointResolverMiddleware"

    let endpointResolver: EndpointResolver

    let endpointParams: EndpointParams

    let authSchemeResolver: ClientRuntime.EndpointAuthSchemeResolver

    public init(endpointResolver: EndpointResolver, endpointParams: EndpointParams, authSchemeResolver: ClientRuntime.EndpointAuthSchemeResolver = ClientRuntime.DefaultEndpointAuthSchemeResolver()) {
        self.endpointResolver = endpointResolver
        self.endpointParams = endpointParams
        self.authSchemeResolver = authSchemeResolver
    }

    public func handle<H>(context: Context,
                  input: ClientRuntime.SdkHttpRequestBuilder,
                  next: H) async throws -> ClientRuntime.OperationOutput<OperationStackOutput>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        let endpoint = try endpointResolver.resolve(params: endpointParams)

        var signingName: String? = nil
        var signingAlgorithm: String? = nil
        if let authSchemes = endpoint.authSchemes() {
            let schemes = try authSchemes.map { try EndpointAuthScheme(from: $0) }
            let authScheme = try authSchemeResolver.resolve(authSchemes: schemes)
            signingAlgorithm = authScheme.name
            switch authScheme {
            case .sigV4(let param):
                signingName = param.signingName
            case .sigV4A(let param):
                signingName = param.signingName
            case .none:
                break
            }
        }

        let smithyEndpoint = SmithyEndpoint(endpoint: endpoint, signingName: signingName)

        var host = ""
        if let hostOverride = context.getHost() {
            host = hostOverride
        } else {
            host = "\(context.getHostPrefix() ?? "")\(smithyEndpoint.endpoint.host)"
        }

        if let protocolType = smithyEndpoint.endpoint.protocolType {
            input.withProtocol(protocolType)
        }

        if let signingName = signingName {
            context.attributes.set(key: AttributeKeys.signingName, value: signingName)
            context.attributes.set(key: AttributeKeys.selectedAuthScheme, value: context.getSelectedAuthScheme()?.getCopyWithUpdatedSigningProperty(key: AttributeKeys.signingName, value: signingName))
        }
        if let signingAlgorithm = signingAlgorithm {
            context.attributes.set(key: AttributeKeys.signingAlgorithm, value: AWSSigningAlgorithm(rawValue: signingAlgorithm))
        }

        if let headers = endpoint.headers {
            input.withHeaders(headers)
        }

        input.withMethod(context.getMethod())
            .withHost(host)
            .withPort(smithyEndpoint.endpoint.port)
            .withPath(smithyEndpoint.endpoint.path.appendingPathComponent(context.getPath()))
            .withHeader(name: "Host", value: host)

        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SdkHttpRequestBuilder
    public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
    public typealias Context = ClientRuntime.HttpContext
}
