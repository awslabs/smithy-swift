// Code generated by smithy-swift-codegen. DO NOT EDIT!

import class SmithyJSON.Reader
import enum SmithyReadWrite.ReaderError
import enum SmithyReadWrite.ReadingClosures
import struct Foundation.Data

extension WeatherClientTypes.Precipitation {

    static func read(from reader: SmithyJSON.Reader) throws -> WeatherClientTypes.Precipitation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "rain":
                return .rain(try reader["rain"].read() ?? false)
            case "sleet":
                return .sleet(try reader["sleet"].read() ?? false)
            case "hail":
                return .hail(try reader["hail"].readMap(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false))
            case "snow":
                return .snow(try reader["snow"].read())
            case "mixed":
                return .mixed(try reader["mixed"].read())
            case "other":
                return .other(try reader["other"].read(with: WeatherClientTypes.OtherStructure.read(from:)))
            case "blob":
                return .blob(try reader["blob"].read())
            case "foo":
                return .foo(try reader["foo"].read(with: WeatherClientTypes.Foo.read(from:)))
            case "baz":
                return .baz(try reader["baz"].read(with: WeatherClientTypes.Baz.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}
