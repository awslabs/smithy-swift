// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import SmithyJSON
import SmithyReadWrite

extension WeatherClientTypes.Precipitation {

    static func write(value: WeatherClientTypes.Precipitation?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .baz(baz):
                try writer["baz"].write(baz, with: WeatherClientTypes.Baz.write(value:to:))
            case let .blob(blob):
                try writer["blob"].write(blob)
            case let .foo(foo):
                try writer["foo"].write(foo, with: WeatherClientTypes.Foo.write(value:to:))
            case let .hail(hail):
                try writer["hail"].writeMap(hail, valueWritingClosure: Swift.String.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
            case let .mixed(mixed):
                try writer["mixed"].write(mixed)
            case let .other(other):
                try writer["other"].write(other, with: WeatherClientTypes.OtherStructure.write(value:to:))
            case let .rain(rain):
                try writer["rain"].write(rain)
            case let .sleet(sleet):
                try writer["sleet"].write(sleet)
            case let .snow(snow):
                try writer["snow"].write(snow)
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WeatherClientTypes.Precipitation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "rain":
                return .rain(try reader["rain"].read() ?? false)
            case "sleet":
                return .sleet(try reader["sleet"].read() ?? false)
            case "hail":
                return .hail(try reader["hail"].readMap(valueReadingClosure: Swift.String.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false))
            case "snow":
                return .snow(try reader["snow"].read())
            case "mixed":
                return .mixed(try reader["mixed"].read())
            case "other":
                return .other(try reader["other"].read(with: WeatherClientTypes.OtherStructure.read(from:)))
            case "blob":
                return .blob(try reader["blob"].read())
            case "foo":
                return .foo(try reader["foo"].read(with: WeatherClientTypes.Foo.read(from:)))
            case "baz":
                return .baz(try reader["baz"].read(with: WeatherClientTypes.Baz.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}
