/*
 *
 *  * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  *
 *  * Licensed under the Apache License, Version 2.0 (the "License").
 *  * You may not use this file except in compliance with the License.
 *  * A copy of the License is located at
 *  *
 *  *  http://aws.amazon.com/apache2.0
 *  *
 *  * or in the "license" file accompanying this file. This file is distributed
 *  * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 *  * express or implied. See the License for the specific language governing
 *  * permissions and limitations under the License.
 *
 */

package software.amazon.smithy.swift.codegen

import io.kotest.matchers.string.shouldContain
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import software.amazon.smithy.build.MockManifest
import software.amazon.smithy.codegen.core.SymbolProvider
import software.amazon.smithy.model.Model
import software.amazon.smithy.model.shapes.MemberShape
import software.amazon.smithy.model.shapes.OperationShape
import software.amazon.smithy.model.shapes.ServiceShape
import software.amazon.smithy.model.shapes.StructureShape
import software.amazon.smithy.swift.codegen.integration.SwiftIntegration

class ServiceGeneratorTests: TestsBase() {
    @Test
    fun `it renders swift protocols in separate file`() {
        val model = createModelFromSmithy("simple-service-with-operation.smithy")
        val manifest = MockManifest()
        val context = buildMockPluginContext(model, manifest)

        SwiftCodegenPlugin().execute(context)

        Assertions.assertTrue(manifest.hasFile("example/ExampleClientProtocol.swift"))
    }

    @Test
    fun `it renders swift protocol correctly`() {
        val struct = createStructureWithoutErrorTrait()
        val structs = listOf(struct)
        val operation = OperationShape.builder().id("smithy.example#GetFoo").input(struct).output(struct).build()
        val operations = listOf(operation)
        val service = ServiceShape.builder().id("smithy.example#Example").version("0.1.1").addOperation(operation).build()

        val model: Model = createModelWithServiceShape(structs, service, operations)
        val provider: SymbolProvider = SwiftCodegenPlugin.createSymbolProvider(model, "test")
        val writer = SwiftWriter("MockPackage")

        val manifest = MockManifest()
        val context = buildMockPluginContext(model, manifest)

        val settings: SwiftSettings = SwiftSettings.from(context.model, context.settings)
        val generator = ServiceGenerator(settings, model, provider, writer, emptyList())
        generator.render()

        val contents = writer.toString()
        contents.shouldContain(SwiftWriter.staticHeader)
        val expectedGeneratedStructure = "" +
                "// Code generated by smithy-swift-codegen. DO NOT EDIT!\n\n\n\n" +
                "public protocol ExampleClientProtocol {\n" +
                "    func getFoo(input: MyStruct, completion: (SdkResult<MyStruct, GetFooOperationError>) -> Void)\n" +
                "}\n"

        contents.shouldContain(expectedGeneratedStructure)
    }

    private fun createModelWithServiceShape(structs: List<StructureShape>, service: ServiceShape, operations: List<OperationShape>): Model {

        val assembler = Model.assembler()
        structs.forEach {
            assembler.addShape(it)
        }
        operations.forEach {
            assembler.addShape(it)
        }
        assembler.addShape(service)
        return assembler.assemble().unwrap()
    }
}